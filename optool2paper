#!/usr/bin/perl

print ">>> $ARGV[0]  ",length(@ARGV),"  \n";

if (($#ARGV == 1) and ($ARGV[0] eq "-s")) {
  print "$#ARGV setting\n";
  exit(0);
}

$i = 0;
$method = 'dhs'; $fmax = 0.8;
while (@ARGV) {
  $_ = shift;
  print "working on: $_\n";
  if (/^-[mc]$/ or /^[^-]/) {
    # The composition
    print "here: $_\n";
    if ($_ eq '-m')    {$_=shift;$mat[$i]{"loc"}='m'}
    elsif ($_ eq '-c') {$_=shift;$mat[$i]{"loc"}='c'}
    else               {         $mat[$i]{"loc"}='c'}
    $mat[$i]{"key"} = $_;
    if (&n) {
      $mat[$i]{"mfrac"} = shift;
      if (&n) {
        $mat[$i]{"rho"} = shift;
      }
    } else {
      $mat[$i]{"mfrac"} = 1.0;
    }
    $mftot += $mat[$i]{"mfrac"};
    $i++;
    next;
  } elsif (/^-(mie|dhs|mmf)/) {
    # The computational method
    $method = $1;
    $method = dhs if $method eq 'fmax';
    if (&n) {
      $p = shift;
      $fmax = $p if $method eq 'dhs';
      $a0   = $p if $method eq 'mmf';
      if (&n) {
        $p = shift;
        $shape = $p if $method eq 'mmf';
        if (&n) {
          $p = shift;
          $kf = $p if $method eq 'mmf';
        }
      }
    }
    next;
  } elsif (/^-p$/) {
    # Porosity
    $pcore = shift;
    if (&n) {$pmantle=shift} else {$pmantle=$pcore}
    next;
  } elsif (/^-a$/) {
    # Grain size distribution
    if (&n) {$amin = shift; if (&n) {$amax = shift; if (&n) {$apow = shift; if (&n) {$na = shift}}}}
    next;
  } elsif (/^-l$/) {
    # Wavelengths distributioon
    if (&n) {$lmin = shift; if (&n) {$lmax = shift; if (&n) {$nl = shift}}
    } else {shift}   # remove the wavelength grid file
    next;
  } elsif (/^-o$/) {
    # Output directory
    shift if &o; next;
  } elsif (/^-s$/) {
    # Scattering
    shift if &n; next;
  } elsif (/^-chop$/) {
    # Chopping
    if (&n) {$chop = shift;}; next;
  } elsif (/^-d$/) {
    # The division flag
    $divide = 1; shift if &n; next;
  } elsif (/^-fits$/) {
    next;
  } elsif (/^-radmc$/) {
    # RADMC
    if (not &a) {shift}; next;
  } elsif (/^-(q|n|debug|v|b|blendonly)$/) {next;
  } else {next}
}

# Get database information about the used materials

$nm = $i-1;
for $i (0..$nm) {
  print "$i $mat[$i]{'loc'} $mat[$i]{'key'} $mat[$i]{'mfrac'} $mat[$i]{'rho'}\n";
}

# Write the paragraph and table

sub n { is_number($ARGV[0]) }      # number?
sub a { $ARGV[0]=~/^[a-zA-Z]/ }    # word, not number?
sub o { $ARGV[0]=~/^-[a-zA-Z]/ }   # option?
sub is_number {$_[0] =~ /^-?\.?[0-9][.0-9]*([eE]-?[0-9]+)?$/}

sub get_record_from_file {
  $file = shift;
  my %hash;
  open($fh,"<",file) or die "Cannot open file $file\n";
  while (<$fh>) {
    if (/^[#*!]\s+(\S+):\s+(\S.*\S)/) {
      $hash{$1} = trim($hash{$1}." ".$2);
      next;
    }
    last unless /^[#*!]/;
  }
  close $fh;
  return \%hash
}

sub read_DATA {
  my %a;
  # FIXME: clean out at every comment line, so that we can simply append when updating?
  while (<DATA>) {
    next if /^\s*#/;
    next if /^\s*$/;
    if (/^\s*(key):\s+(\S+)/) {$key = $2; next}
    if (/^\s*(\S+):\s+(\S+)/) {$a{$key}{$1} = trim($a{$key}{$1}." ".$2)}
  }
  return \%a
}

__DATA__

"
\subsection{Opacities}




Table:

Name | Chemical Formula | Bulk density | Location  | Mass fraction | Reference



"
