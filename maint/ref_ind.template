! -*- mode:f90 -*-

subroutine ListBuiltinMaterials()
  HELPBLOCK
end subroutine ListBuiltinMaterials

subroutine GetAndRegridLNK(input,grid,e1,e2,n,loglog,rho)
  use Defs
  IMPLICIT NONE
  REAL (KIND=dp) :: grid(n)
  REAL (KIND=dp) :: e1(n),e2(n),x0,y01,y02,x1,y11,y12,wp,gamma
  REAL (KIND=dp) :: rho,rho_in
  REAL (KIND=dp) :: lgy11,lgy12,lgy01,lgy02,lgx0,lgx1,lggr
  integer i,j,n, n_line, iostatus, count_numbers, count_data_lines
  character*100 input
  character*500 line
  real (KIND=dp),allocatable :: x(:),y1(:),y2(:)
  integer n0,i0,nn,nd
  logical loglog
  COMPLEX (KIND=dp) :: m,m0,m1,cdlog10

  EXTERNAL_DEFS
  
  allocate(x(10000))
  allocate(y1(10000))
  allocate(y2(10000))

  ! Check if INPUT is a built-in dataset
  select case(trim(input))
     CASE_DEFS
  case default
     ! read data from file
     rho_in = rho
     call check_for_file(input)
     nd = count_data_lines(input)
     open(99,file=input)
     n0 = 0
1    continue
     read(99,'(A)') line
     line = trim(adjustl(line))
     ! Skip commented lines at the beginning of the file
     if (line(1:1).eq.'#' .or. line(1:1).eq.'!' .or. line(1:1).eq.'*') goto 1
     nn = count_numbers(line)
     if (nn.ne.2) then
        ! Oops, the NLAM RHO line is not there.
        if (rho_in > 0d0) then
           ! The user gave rho on the command line, so we can recover using the line count
           rho = rho_in
           n0  = nd-1
        else
           ! No way to recover, error out.
           write(*,'("ERROR: no line with NLAM and RHO values in file: ",A)') trim(input)
           write(*,'("This is the relevant line: ",A)') trim(line)
           write(*,'("The line seems to contain ",I3," numbers to read, but should have 2.")') nn
           write(*,'("If you do not want to edit the file, specify rho on the")')
           write(*,'("command line like this:  -c path/to/file.lnk MFRAC RHO")')
           stop
        endif
     else
        read(line,*) n0, rho
     endif
     if (n0 .ne. nd-1) then
        write(*,'("ERROR: NLAM in file does not match the number of data lines")')
        print *,"file: ", trim(input),";    NLAM=",n0,";    Ndata=",nd-1
        stop
     endif
     do i=1, n0
        read (99, fmt=* ) x(i), y1(i), y2(i)
        ! Convert the wavelength to micron
        x(i) = x(i)
     end do
     close(99)
  end select
  
  i   = 1
  i0  = 1
  x0  = x(i0)
  y01 = y1(i0)
  y02 = y2(i0)
  wp  = (1d0-y01)/x0**2
  gamma = y02/x0**3

  ! ------------------------------------------------------------------
  ! The first block is space in the grid that is before the first
  ! specified wavelength. Simple extrapolation: keep same value
  ! ------------------------------------------------------------------
5 if(x0.ge.grid(i)) then
     e1(i) = 1d0-wp*grid(i)**2
     e2(i) = gamma*grid(i)**3
     e1(i) = y01
     e2(i) = y02
     i = i+1
     goto 5
  endif
  
2 i0 = i0+1
  if(i0.gt.n0) goto 4
  x1  = x(i0)
  y11 = y1(i0)
  y12 = y2(i0)
3 if(grid(i).le.x1.and.grid(i).gt.x0) then
     ! loglog interpolation betwwen points

     lgy11 = log10(y11); lgy12 = log10(y12)
     lgy01 = log10(y01); lgy02 = log10(y02)
     lgx0  = log10(x0) ; lgx1  = log10(x1)
     lggr  = log10(grid(i))
     
     e1(i) = 10.d0**(lgy11 + (lggr-lgx1)*(lgy01-lgy11)/(lgx0-lgx1))
     e2(i) = 10.d0**(lgy12 + (lggr-lgx1)*(lgy02-lgy12)/(lgx0-lgx1))

     i = i+1
     if(i.gt.n) goto 4
     goto 3
  endif
  x0  = x1
  y01 = y11
  y02 = y12
  goto 2
4 continue

  ! ------------------------------------------------------------------
  ! Extrapolation to long wavelengths
  ! ------------------------------------------------------------------
  if(loglog) then
     m0 = dcmplx(e1(i-1),e2(i-1))
     if(abs(m0).gt.2d0.and..false.) then
        ! don't use the conducting extrapolation since it is not very accurate
        do j=i,n
           m = m0*sqrt(grid(j)/grid(i-1))
           e1(j) = real(m)
           e2(j) = dimag(m)
        enddo
     else
        ! use loglog extrapolation
        do j=i,n
           if (i .le. 2) then
              ! wow, we are entirely outside of the measured grid
              ! Use the last two tabulated values to extrapolate
              e1(j) = 10d0**(log10(y1(n0-1))+ &
                   log10(y1(n0)/y1(n0-1))*log10(x(n0-1)/grid(j)) &
                   /log10(x(n0-1)/x(n0)))
              e2(j) = 10d0**(log10(y2(n0-1))+ &
                   log10(y2(n0)/y2(n0-1))*log10(x(n0-1)/grid(j)) &
                   /log10(x(n0-1)/x(n0)))
           else
              ! OK, we already have interpolated grid points we should use
              e1(j) = 10d0**(log10(e1(i-2))+ &
                   log10(e1(i-1)/e1(i-2))*log10(grid(i-2)/grid(j)) &
                   /log10(grid(i-2)/grid(i-1)))
              e2(j) = 10d0**(log10(e2(i-2))+ &
                   log10(e2(i-1)/e2(i-2))*log10(grid(i-2)/grid(j)) &
                   /log10(grid(i-2)/grid(i-1)))
           endif
        enddo
     endif
  else
     ! use the dielectric extrapolation, this is the default
     do j=i,n
        e1(j) = e1(i-1)
        e2(j) = e2(i-1)*grid(i-1)/grid(j)
     enddo
  endif
  
  deallocate(x)
  deallocate(y1)
  deallocate(y2)
  
  return
end subroutine GetAndRegridLNK
