
* Introduction to optool

This tool produces complex dust particle opacities right from the
command line. It is derived from Michiel Min's DHS [[https://dianaproject.wp.st-andrews.ac.uk/data-results-downloads/fortran-package/][OpacityTool]] and
also implements Ryo Tazaki's MMF theory for highly porous aggregates.

* Capabilities

- stand-alone tool, fully command line driven, no input files need to
  be edited
- full scattering matrix output in several formats, including for
  RADMC-3D
- combining materials through mixing into a complex grain with
  porosity
- /built-in/: a curated collection of materials for applications in
  astronomy
- external refractive index data can be used just as easily
- two computational methods: (i) *DHS (Distribution of Hollow
  Spheres)* for /irregular grains/ and /low-porosity/ aggregates.
  Standard *Mie theory* for /perfect spheres/ is available as a
  limiting case. (ii) *MMF (Modified Mean Field)* theory for
  /high-porosity/fractal aggregates/
- =Python= interface module for plotting and post-processing

* Terms of use


=optool= is distributed under the [[https://opensource.org/licenses/MIT][MIT license]] and can be used, changed
and redistributed freely. The relevant references for this tool are
listed below.  Depending on which parts of =optool= you are using,
please reference the corresponding papers.

- =optool=: [[https://github.com/cdominik/optool.git][=https://github.com/cdominik/optool.git=]]
- DHS model for irregular grains:  [[https://ui.adsabs.harvard.edu/abs/2005A%26A...432..909M][Min et al. 2005, A&A, 432, 909]]
- MMF model for aggregates: [[https://ui.adsabs.harvard.edu/abs/2018ApJ...860...79T][Tazaki & Tanaka 2018, ApJ 860, 79]]
- DIANA standard Opacities: [[https://ui.adsabs.harvard.edu/abs/2016A%26A...586A.103W][Woitke, Min et al. 2016, A&A 586, 103]]
- Third party software: [[https://ui.adsabs.harvard.edu/abs/1981ApOpt..20.3657T][Toon et al. 1981, Applied Optics 20, 3657]]
- References to [[#builtin-materials][refractive index data]] used in your particular
  application.

* Examples
A simple grain made only of the default pyroxene, for the default
grain size distribution ($a^{-3.5}$ powerlaw from 0.05 to 3000\mu{}m),
on the default wavelength grid (0.05\mu{}m to 1cm).

: optool pyr

Include the scattering matrix in the produced output

: optool pyr -s

Reproduce the DIANA standard dust model, using a specific pyroxene
(70% Mg) and carbon, in a mass ratio 0.87/0.13, and with a porosity of
25%.

: optool pyr-mg70 0.87  c 0.13  -p 0.25

List the built-in materials

: optool -c

Add a water ice mantle (built-in data from Warren+08) that is 20% of
the core mass

: optool pyr-mg70 0.87  c 0.13  -m h2o-w 0.2  -p 0.25

Like the previous example, but use ice refractive index data from a
separate file.

: optool pyr-mg70 0.87  c 0.13  -p 0.25  -m data/ice_hudgins.dat 0.2

Pure water ice grains in a narrow size distribution from 1 to 3
microns, with 15 sample sizes following an $f(a)\propto a^{-2.5}$
powerlaw size distribution. Also, restrict the wavelength range to
10-100\mu{}m, and turn off DHS to get perfect spheres.

: optool ice  -a 1 3 2.5 15  -l 10 100 -fmax 0

For silicon carbide, compute the opacity of a single grains size (2.5\mu{}m)
at \lambda=8.9\mu{}m.

: optool -a 2.5 -l 8.9 sic

Represent the default dust model (DIANA, you also get this when you do
not give any materials at all) in 42 grain sizes, and produce input
files for RADMC-3D, one for each grain size, with full scattering
matrix, chopping 3 degrees from the scattering peak.

: optool -na 42 -d -s -radmc -chop 3

Use MMF to compute the opacities of dust aggregates made of pyroxene
monomers.  Use a monomer radius of 0.3 \mu{}m to construct aggregates
with compact-volume radii between 10 and 30 \mu{}m, and a filling
factor of 5%

: optool pyr  -a 10 30  -mmf 0.3 0.05

As before, but fix the fractal dimension $D_f=1.9$ instead of setting
the filling factor

: optool pyr  -a 10 30  -mmf 0.3 1.9


* Acknowledgments
- [[https://www.researchgate.net/profile/Charlene_Lefevre][Charléne Lefévre]] for [[https://github.com/charlenelefevre/SIGMA][SIGMA]], which triggered me to add a grain mantle
  using the Maxwell Garnett rule.
- [[http://www.ita.uni-heidelberg.de/~dullemond/index.shtml?lang=en][Kees Dullemond]] for his python plotting routine =viewarr= ([[https://github.com/dullemond/interactive_plot][available
  on github]]).
- [[https://www.mpia.de/person/32666/1415887][Jeroen Bouwman]] for some pointers to refractive index data.
* User Guide
See the [[file:UserGuide.pdf][User Guide]] for more information.
* Important changes

- Release 1.7.2 ::
  - Implementation of particle arithmetic in the python module, to
    allow constructing grain models by adding separate grain types.
- Release 1.7 ::
  - New builtin materials (ices!): CO, CO2, CH3OH, CH4, and NH3.
  - Mean opacities can be computed in the Python module.
  - the =scatnorm= method in the Python module allows to renormalize
    the scattering matrix to various conventions used in the
    literature.
  - The python module contains a class for =lnk= files, that can be used
    to read tables, convert units, sort, smooth and decimate the
    data.  This is not described in the UserGuide, but after loading
    =optool.py=, the documentation will be available in python.
- Release 1.5 ::
  - An implementation of the Modified Mean Field Theory (MMF, Tazaki &
    Tanaka 2018) to treat opacities of very porous or fractal
    aggregates has been added.
- Release 1.4 ::
  - The restriction that there can be only one material in the mantle
    (and, therefore, only one *-m* switch) has been dropped.  If there
    are several mantle materials, these will be mixed using the
    Bruggeman rule before the mantle is added to the grain.
  - Fixed a bug in the computation of core mantle grains.
  - Added a class to deal with lnk files to optool.py
- Release 1.3 ::
  - Improved extrapolation of refractive indices
  - New python interface.  The interface is now a proper module that
    greatly simplifies working with the output of optool.
- Release 1.2 ::
  - Internal and external testing of the code.
